#!/usr/bin/env node

/**
 * Module dependencies.
 */
const app = require('../app');
const debug = require('debug')('back-end:server');
// const fs = require('fs'); Causes server to crash bug fix
const http = require('http');
const mongoose = require('mongoose');
const connection = require('.././database/connect.js');
const schemas = require('.././database/schemas.js');
// const dotenv = require('dotenv/config');

/**
 * Get port from environment and store in Express.
 */

//create schemas for database
schemas.create_schemas();

let port = normalizePort(process.env.PORT || '4000');
app.set('port', port);

//create connection to dbs
connection.connect();

// //create schemas for database
// schemas.create_schemas() ;

/**
 * Create HTTPS server.
 */

let https = require("https");
let fs = require("fs");

/**
 * Local Build
 */
 let options = {
     key: fs.readFileSync("./bin/key.pem"),
    cert: fs.readFileSync("./bin/cert.pem")
 };

/**
 * Docker Build
 */
/*let options = {
    key: fs.readFileSync("/etc/ssl/live/code9devs.me/privkey.pem"),
    cert: fs.readFileSync("/etc/ssl/live/code9devs.me/fullchain.pem")
};*/



let server = https.createServer(options, app);
// var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, function () {
    console.log("Listening on port 4000");
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    let port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    let bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    let addr = server.address();
    let bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
